# Boston Housing Price Prediction

## Overview
This project focuses on predicting housing prices using the Boston Housing dataset. It employs machine learning techniques such as Linear Regression and Ridge Regression to model the relationship between various housing features and their corresponding prices.

## Dataset
The dataset is retrieved from [CMU StatLib](http://lib.stat.cmu.edu/datasets/boston) and consists of 506 observations with 13 features related to housing in Boston.

## Features Used
- CRIM: Per capita crime rate by town
- ZN: Proportion of residential land zoned for large lots
- INDUS: Proportion of non-retail business acres per town
- CHAS: Charles River dummy variable (1 if tract bounds river; 0 otherwise)
- NOX: Nitrogen oxide concentration (parts per 10 million)
- RM: Average number of rooms per dwelling
- AGE: Proportion of owner-occupied units built before 1940
- DIS: Weighted distance to five Boston employment centers
- RAD: Index of accessibility to radial highways
- TAX: Property tax rate per $10,000
- PTRATIO: Pupil-teacher ratio by town
- B: Proportion of Black residents
- LSTAT: Percentage of lower status of the population
- PRICE: Median value of owner-occupied homes (target variable)

## Project Structure
The script performs the following steps:
1. **Load and Prepare Data**: Downloads the dataset, processes it, and splits it into training and testing sets.
2. **Create Correlation Heatmap**: Visualizes feature relationships.
3. **Train Models**: Fits Linear Regression and Ridge Regression models.
4. **Evaluate Models**: Computes RMSE and R-squared scores for both training and testing data.
5. **Analyze Feature Importance**: Extracts feature importance for applicable models.
6. **Plot Predictions**: Visualizes model predictions against actual values.

## Dependencies
Ensure you have the following Python libraries installed:
```bash
pip install numpy pandas matplotlib seaborn scikit-learn
```

## Running the Project
Run the script using the following command:
```bash
python boston_housing.py
```

## Output
- Model evaluation metrics
- Correlation heatmap
- Predicted vs actual price scatter plots

## Future Improvements
- Implement additional models such as Decision Trees and Random Forests
- Optimize hyperparameters using Grid Search or Randomized Search
- Deploy as a web application

